<!DOCTYPE html>
<html>

<head>
  <title>Socket.IO chat</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
</head>

<body>
  <section>
    <span id="online-user"></span>
    <form action="" id="userForm">
      <input id="nickname-box" data-testid="nickname-box" />
      <button data-testid="nickname-button">Save</button>
    </form>
  </section>
  <section>
    <ul id="users"></ul>
  </section>
  <section>
    <ul id="messages"></ul>
    <form action="" id="chatForm">
      <input id="message-box" autocomplete="off" data-testid="message-box" />
      <button data-testid="send-button">Send</button>
    </form>
  </section>

  <script>
    const socket = io();
    const usersOnlineList = [];
    const messages = JSON.parse('<%- messages %>');
    const generateUser = () => {
      const length = 16;
      const randomChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      let result = '';
      for (let i = 0; i < length; i += 1) {
        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
      } return result;
    };

    let currentUser = generateUser();
    socket.emit('login', { user: currentUser });
    const userElement = document.querySelector('#online-user');
    userElement.innerText = currentUser;

    const userForm = document.querySelector('#userForm')
    const inputName = document.querySelector('#nickname-box')
    userForm.addEventListener('submit', (e) => {
      e.preventDefault();

      const prevUser = currentUser.slice();
      currentUser = inputName.value;
      userElement.innerText = currentUser;
      socket.emit('login', { user: currentUser, prevUser });
      inputName.value = '';
      return false;
    })

    const chatForm = document.querySelector('#chatForm')
    const inputMessage = document.querySelector('#message-box')
    chatForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const messageObject = { nickname: currentUser, chatMessage: inputMessage.value };
      socket.emit('message', messageObject);
      inputMessage.value = '';
      return false;
    });


    const messagesUl = document.querySelector('#messages');

    const printStoredMessages = ({ timestamp, nickname, message }) => {
      const splitTimestamp = timestamp.split(/[-]|[ ]/g);
      const [y, m, d, t] = splitTimestamp;
      const invertTimestamp = `${d}-${m}-${y} ${t}`;
      const li = document.createElement('li');
      let testId = document.createAttribute('data-testid');
      testId.value = 'message';
      li.setAttributeNode(testId);
      li.innerText = `${invertTimestamp} - ${nickname}: ${message}`;
      messagesUl.appendChild(li);
    };

    const printMessage = (message) => {
      const li = document.createElement('li');
      let testId = document.createAttribute('data-testid');
      testId.value = 'message';
      li.setAttributeNode(testId);
      li.innerText = message
      messagesUl.appendChild(li);
    };

    messages.forEach((message) => printStoredMessages(message));
    socket.on('message', (msg) => printMessage(msg));

    const usersUl = document.querySelector('#users');
    socket.on('onlineUsers', (users) => {
      usersUl.innerHTML = '';
      const userIndex = users.indexOf(currentUser);
      const thisUser = users.splice(userIndex, 1);
      const li = document.createElement('li');
      let testId = document.createAttribute('data-testid');
      testId.value = 'online-user';
      li.setAttributeNode(testId);
      li.innerText = currentUser;
      usersUl.appendChild(li);
      users.forEach((user) => {
        const li = document.createElement('li');
        let testId = document.createAttribute('data-testid');
        testId.value = 'online-user';
        li.setAttributeNode(testId);
        li.innerText = user;
        usersUl.appendChild(li);
      });
    });
  </script>
</body>

</html>