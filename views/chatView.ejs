<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="style.css" />
  <title>Chat View</title>
</head>
<body>
  <div class="container">
    <div class="profile">
      <div class="profile-pic"></div>
      <div class="username-container">
        <span data-testid="online-user" id="username"></span>
        <form id="user-form">
          <input data-testid="nickname-box" id="name-input" />
          <button data-testid="nickname-button">Set</button>
        </form>
      </div>
    </div>
    <div class="users">
      <ul id="usersUl"></ul>
    </div>
    <div class="chat-container">
      <div class="chat-box">
        <ul id="messagesUl"></ul>
      </div>
      <form id="message-form"  action="">
        <input data-testid="message-box" id="messageInput" autocomplete="off" autofocus />
        <button data-testid="send-button">Send</button>
      </form>
    </div>
  </div>
  
  <script src="/socket.io/socket.io.js"></script>
  <script src="script.js"></script>
  <script>
    const socket = io();

    // profile
    let nick = '';
    const userSpan = document.querySelector('#username');
    const userForm = document.querySelector('#user-form');
    const userInput = document.querySelector('#name-input');
    const usersUl = document.querySelector('#usersUl');

    const createUserInList = (username) => {
      const li = document.createElement('li');
      li.innerText = username;
      // li.setAttribute('data-testid', 'message');
      usersUl.appendChild(li);
    };

    socket.on('connect', () => {
      nick = socket.id;
      userSpan.innerText = nick;
      
      socket.emit('userConnected');
    });

    socket.on('reloadUsersList', (userList) => {
      usersUl.innerHTML = '';
      userList.forEach((user) => createUserInList(user));
    });

    userForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      nick = userInput.value;
      userSpan.innerText = nick;
      userInput.value = '';
      socket.emit('userChangedName', nick);
      return false;
    });

    // messages
    const messageForm = document.querySelector('#message-form');
    const messageInput = document.querySelector('#messageInput');

    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      socket.emit('userMessage', { chatMessage: messageInput.value, nickname: nick });
      messageInput.value = '';
      return false;
    });

    const createMessage = (message) => {
      const messagesUl = document.querySelector('#messagesUl');
      const li = document.createElement('li');
      li.innerText = message;
      li.setAttribute('data-testid', 'message');
      messagesUl.appendChild(li);
    };

    socket.on('message', (message) => createMessage(message));
  </script>
</body>
</html>
