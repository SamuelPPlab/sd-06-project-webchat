<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/socket.io/socket.io.js"></script>
    <title>Webchat</title>
</head>
<body>
    <h1>Chat UOL</h1>
    <label for="">Type a message</label>
    <input type="text" name="message" id="message-box" data-testid="message-box">
    <button id="send-button" data-testid="send-button">Send message</button>
    <br>
    <label for="nickname">Nickname</label>
    <ul id="user-names" name="nickname"></ul>
    <br>
    <label for="">Choose a nickname</label>
    <input type="text" id="new-nickname" name="new-nickname" data-testid="nickname-box"/>
    <button id="change-nickname" data-testid="nickname-button">Change nickname</button>
    <h3>Chat</h3>
    <ul id="messages-list">
        <% messages.forEach((message) => { %>
            <li data-testid="message"><%= message.timestamp %> <%= message.nickname %>: <%= message.message %></li>
        <% }) %>
    </ul>

    <script>
        const socket = io();
        socket.emit('random-nickname', socket.id);

        let users = [];
        let messages = [];

        // window.onbeforeunload = () => {
            // const typedNickname = document.querySelector('#new-nickname').value;
            // socket.emit('change-nickname', typedNickname, socket.id);
            // window.alert('coruja')
            // console.log('console')
        //     socket.disconnect();
        //     return false;
        // };

        // socket.on('public-nickname', (nicknameListFromServer, nicknameFromServer) => {
        socket.on('public-nickname', (nicknameListFromServer) => {
            document.querySelector('#user-names').innerHTML = ''
            const topUser = nicknameListFromServer.find(user => user.socketId === socket.id)

            const newTopUser = document.createElement("LI")
                newTopUser.innerText = topUser.nickname
                newTopUser.setAttribute("data-testid", "online-user");
                document.querySelector('#user-names').appendChild(newTopUser)

            nicknameListFromServer.forEach(({ nickname, socketId }) => {
                if (socketId !== socket.id) {
                    const newUser = document.createElement("LI")
                    newUser.innerText = nickname
                    newUser.setAttribute("data-testid", "online-user");
                    document.querySelector('#user-names').appendChild(newUser)
                }
            })
            users = nicknameListFromServer
        })

        socket.on('message', (messagesFromServer) => {
            const newMessageElement = document.createElement("LI")
            newMessageElement.setAttribute("data-testid", "message");
            newMessageElement.innerText = messagesFromServer
            document.querySelector('#messages-list').appendChild(newMessageElement)
        })

        document.querySelector('#send-button').addEventListener('click', () => {
            const messageFromInput = document.querySelector('#message-box').value;
            const messageAuthor = users.find((user) => user.socketId === socket.id)
            console.log('messageAuthor', messageAuthor)
            console.log('users', users)
            const message = { nickname: messageAuthor.nickname, chatMessage: messageFromInput }
            socket.emit('message', message)
        });

        document.querySelector('#change-nickname').addEventListener('click', () => {
            const typedNickname = document.querySelector('#new-nickname').value;
            socket.emit('change-nickname', typedNickname, socket.id);
        });

        // socket.on('disconnect', 'to saindo')

    </script>
</body>
</html>