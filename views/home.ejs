<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Web Chat</title>
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
  <h1>Chat</h1>
  <label>Como quer ser chamado:
    <input data-testid="nickname-box" type="text" id="nickname">
  </label>
  <button data-testid="nickname-button" id="nickname-btn">Salvar</button>
  <br>
  <h2 id='eu'></h2>
  <h3>Usu√°rios online:</h3>
  <ul id="users">
    <li><%=nickname %> </li>
  </ul>
    <br>
    <h3>Mensagens</h3>
    <ul id="all-messages"></ul>
    <br>
    <input type="text" data-testid="message-box" id="message" placeholder="Digite uma nova mensagem aqui">
  <button data-testid="send-button" id="send-btn">Enviar</button>
  <script>
    const nickname = `${Math.random().toString().substr(2, 16)}`;
    const socket = io('http://localhost:3000');
    const nickInput = document.querySelector('#nickname');
    const nickButton = document.querySelector('#nickname-btn');
    const sendMsgBtn = document.querySelector('#send-btn');
    const msgText = document.querySelector('#message');
    window.onload = async () => {
      socket.on('connect', () => {
        socket.emit('initialNickname', ({
          nickname,
          socketID: socket.id
        }));
      });
      sessionStorage.setItem('nickname', nickname);
      const messages = await fetch('http://localhost:3000/chat', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
      }).then((res) => res.json());
      const listMessages = document.querySelector("#all-messages");
      messages.forEach((msg) => {
        const liMessage = document.createElement('li');
        liMessage.setAttribute('data-testid', 'message');
        liMessage.innerText = `${msg.timestamp} ${msg.nickname} ${msg.message}`;
        listMessages.appendChild(liMessage);
      });
    };
    sendMsgBtn.addEventListener('click', () => {
      const nickname = sessionStorage.getItem('nickname');
      socket.emit('message', ({
        chatMessage: msgText.value,
        nickname,
      }));
      msgText.value = '';
      return false;
    });
    socket.on('message', (message) => {
      const messageLi = document.createElement('li');
      messageLi.innerText = message;
      messageLi.setAttribute('data-testid', 'message')
      document.querySelector('#all-messages').appendChild(messageLi)
    })
    nickButton.addEventListener('click', async () => {
      sessionStorage.setItem('nickname', nickInput.value);
      const nicknameStorage = sessionStorage.getItem('nickname');
      await socket.emit('updateNick', ({
        nickname: nicknameStorage,
        socketIdFront: socket.id
      }));
      nickInput.value = '';
      return false;
    });
    socket.on('teste', (nicknames) => {
      const bla = nicknames.find((user) => user.socketID === socket.id)
      const userNow = document.querySelector("#eu");
      userNow.setAttribute('data-testid', 'online-user')
      userNow.innerText = bla.nickname;
      const listUsers = document.querySelector("#users");
      listUsers.innerHTML = '';
      const index = nicknames.findIndex((user) => user.socketID === socket.id);
      console.log(index, 'indeeex')
      nicknames.splice(index, 1);
      nicknames.forEach((user) => {
        const userLI = document.createElement('li');
        userLI.setAttribute('data-testid', 'online-user')
        userLI.innerText = user.nickname;
        listUsers.appendChild(userLI);
      });
    })
  </script>
</body>
</html>

<!-- <!DOCTYPE html>
<html>
  <head>
    <title>Socket.IO - trybe</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font: 13px Helvetica, Arial;
      }
      form {
        background: #000;
        padding: 3px;
        position: fixed;
        bottom: 0;
        width: 100%;
      }
      form input {
        border: 0;
        padding: 10px;
        width: 90%;
        margin-right: 0.5%;
      }
      form button {
        width: 9%;
        background: rgb(130, 224, 255);
        border: none;
        padding: 10px;
        cursor: pointer;
      }
      #mensagens {
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      #mensagens li {
        padding: 5px 10px;
      }
      #mensagens li:nth-child(odd) {
        background: #eee;
      }
    </style>
    <script src="/socket.io/socket.io.js" ></script>
    <script src="//cdn.jsdelivr.net/npm/simple-crypto-js@2.5.0/dist/SimpleCrypto.min.js"></script>

  </head>
  <body>
    <input id="chooseName" data-testid="nickname-box" placeholder="Insira seu nickname"/>
    <button id="saveName" data-testid="nickname-button">Salvar </button>

    <br />
    <hr />
    <br />
    <h2>ONLINE USERS</h2>
    <ul id="users-online">
      
    </ul>
    <br />
    <hr />
    <br />

    <ul id="mensagens"></ul>

    <form action="">
      <input data-testid="message-box" id="mensagemInput" autocomplete="off" /><button data-testid="send-button">Send</button>
    </form>
    <script>

      const socket = io();
      const form = document.querySelector('form')
      const inputMessage = document.querySelector('#mensagemInput')
      const chosenName = document.querySelector('#chooseName');
      const saveName = document.querySelector('#saveName');
      // const nick = document.querySelector('#nickname');
      const messagesUl = document.querySelector('#mensagens');
      const usersUl = document.querySelector('#users-online');

      let nickname;

      nickname = Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10);
      // nick.innerHTML = nickname;
      socket.on('connect', () => {
        socket.emit('getName', nickname);
      });

      const setOnlineUsers = (users) => {
        usersUl.innerHTML = '';
        console.log(users);
        // if(users.length >= 1) {
          // console.log(1);

          users.forEach((user) => {
            const onlineUser = document.createElement('li');
            onlineUser.setAttribute('data-testid', 'online-user');
            onlineUser.innerText = user.nickname;
            usersUl.appendChild(onlineUser);
          });
        // } else {
          // console.log(0);
          // const onlineUser = document.createElement('li');
          // onlineUser.setAttribute('data-testid', 'online-user');
          // onlineUser.innerText = nickname;
        // }
      };
      
      socket.on('onlineUsers', (users) => setOnlineUsers(users));

      saveName.addEventListener('click', (e) => {
        newName = chosenName.value;
        nickname = chosenName.value;
        console.log(newName);
        socket.emit('updateName', newName);
      });
      
      form.addEventListener('submit', (e) =>{
        e.preventDefault();
        console.log(nickname)
        socket.emit('message', { chatMessage: inputMessage.value, nickname });
        
        inputMessage.value = ''
        return false;
      });    
      
      const createMessage = (message) => {
        const li = document.createElement('li');
        li.setAttribute('data-testid', 'message')
        li.innerText = message;
        messagesUl.appendChild(li);
      }

      const allMessages = (messages) => {
        messages.forEach((el) => {
          const { message, nickname, timestamp } = el.messages;

          let time = timestamp.substring(13, 11);
          if (parseInt(time, 10) > 12) {
            time = 'PM';
          } else {
            time = 'AM';
          }
      
          const userMessage = `${timestamp} ${time} - ${nickname}: ${message}`;
          createMessage(userMessage);
        });
      }

      socket.on('message', (msg) => createMessage(msg));
     
      socket.on('allMessages', (msg) => allMessages(msg));

    </script>
  </body>
</html> -->