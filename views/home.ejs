<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project</title>
    <script src="/socket.io/socket.io.js"></script>
  </head>

  <body>
    <h1>webchat</h1>

    <div>
      <h3 id="username">
        <%= Nickname %>
      </h3>

      <input data-testid="nickname-box" type="text" id='updateNick'>

      <button data-testid="nickname-button" id="saveNick">Salvar</button>
    </div>



    <input data-testid="message-box" name="message" type="text" id='message'>
    <button type="submit" data-testid="send-button" id="sendMessage">Enviar</button>



    <h3>Mensagens</h3>

    <ul id='messages'>
      <% if(historic.length> 0) { %>
        <% historic.forEach((msg)=> { %>
          <li data-testid="message">
            <%= msg.timestamps %> - <%= msg.nickname %>: <%=msg.message %>
          </li>
          <% }) %>
            <% } %>
    </ul>

    <h3>Usu√°rios</h3>

    <ul id='users'></ul>

    <script>
      let usersArray;
      const inputMessage = document.querySelector('#message');
      const buttonSend = document.querySelector('#sendMessage');
      const userNick = document.querySelector('#username');
      const inputUpdateNick = document.querySelector('#updateNick');
      const buttonSave = document.querySelector('#saveNick');
      const socket = io();

      socket.emit('NewUser', (userNick.innerHTML));

      buttonSend.addEventListener('click', (e) => {
        const message = inputMessage.value;
        const user = usersArray.find((user) => user.id === socket.id);
        socket.emit('message', { chatMessage: message, nickname: user.name });
        inputMessage.value = '';
        buttonSend.setAttribute('disabled', true);
      });

      inputMessage.addEventListener('keyup', (e) => {
        const message = inputMessage.value;
        if (message.length > 0) {
          buttonSend.removeAttribute('disabled')
          const dataUser = { chatMessage: message, nickname: `User_${socket.id}` }
          if (e.key === 'Enter') {
            socket.emit('message', dataUser);
            inputMessage.value = '';
          }
        } else buttonSend.setAttribute('disabled', true);
      });

      socket.on('message', (message) => {
        const messageLI = document.createElement('li');
        messageLI.innerHTML = message;
        messageLI.setAttribute('data-testid', 'message');
        document.querySelector('#messages').appendChild(messageLI);
      });

      socket.on('usersNick', (users) => {
        const elementUl = document.querySelector('#users');
        while (elementUl.firstChild) elementUl.removeChild(elementUl.firstChild);
        const user = users.find((u) => u.id === socket.id);
        const newUsers = users.filter((u) => u.id !== socket.id);
        newUsers.unshift(user);
        usersArray = users
        console.log(newUsers)
        newUsers.forEach(user => {
          const messageLI = document.createElement('li');
          messageLI.setAttribute('data-testid', 'online-user');
          messageLI.innerHTML = user.name;
          document.querySelector('#users').appendChild(messageLI);
        });

        buttonSave.addEventListener('click', () => {
          const newNick = inputUpdateNick.value;
          const user = usersArray.find((user) => user.id === socket.id);
          user.name = newNick;
          socket.emit('newNick', user);
          userNick.innerHTML = newNick;
        })
      });

    </script>
  </body>

</html>
