<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous"
  >
  <script src="/socket.io/socket.io.js"></script>
  <title>TryChat Socket.io</title>
</head>
<body>
  <div class="container">
    <h1>TryChat</h1>
    <div class="container">
      <h3>Online:</h3>
      <ul class="list-group" id="online-users-list">
      </ul>
      </div>
    <div class="container">
      <p>Nickname: </p>
      <span id="nickname"></span>
    </div>
    <form>
      <div class="form-group">
        <label for="message"></label>
        <input
          class="form-control"
          id="nickname-input"
          data-testid="nickname-box"
          name="nickname-input"
          placeholder="Nickname"
          type="text"
        >
      </div>

      <button
        class="btn btn-primary"
        data-testid="nickname-button"
        id="save-btn"
        type="button"
      >
        Save Nickname
      </button>
      <div class="form-group">
        <label for="message"></label>
        <input
          class="form-control"
          id="message"
          data-testid="message-box"
          name="message"
          placeholder="Type your message here..."
          type="text"
        >
          <button
            class="btn btn-primary"
            id="send-btn"
            data-testid="send-button"
            type="button"
          >
            Send message
          </button>
      </div>
    </form>
      <div class="container">
        <ul class="list-group" id="chat-body">
          <% messages.forEach((message) => { %>
            <li
              class='list-group-item'
              data-testid='message'
            >
            <%=`${helpers.dateFormater(message.timestamp)} - ${message.nickname}: ${message.message}`%>
            </li>
          <% }) %>
        </ul>
      </div>
  </div>

  <script>
    const socket = io();

    function nicknameGenerator() {
      const digits = Math.floor(1000000000 + Math.random() * 900000000);
      const nickname = `Guest_${ digits }`;

      return nickname;
    };

    function saveNickname() {
      const button = document.querySelector('#save-btn');
      button.addEventListener('click', () => {
        const nicknameField = document.querySelector('#nickname');
        const nickname = document.querySelector('#nickname-input');

        socket.emit('client-server-update-user', nickname.value)
        nicknameField.innerHTML = nickname.value;
        // nickname.readOnly = true;
      });
    }

    function setNickname() {
      const generatedNickname = nicknameGenerator()
      const nickname = document.querySelector('#nickname');
      nickname.innerHTML = generatedNickname;
    }

    function sendMessage() {
      const button = document.querySelector('#send-btn');

      button.addEventListener('click', () => {
        const chatMessage = document.querySelector('#message').value;
        const nickname = document.querySelector('#nickname').innerHTML;

        socket.emit('message', { chatMessage, nickname });
      });
    }

    function renderOnlineUsers(users, socketId) {
      const currentUser = users.filter((user) => user.socketId === socketId);
      let removeCurrent = [];
      if (users.length >= 2) {
        removeCurrent = (users.filter((user) => user.socketId !== socketId)).reverse();
      }

      const usersToRender = [...currentUser, ...removeCurrent];

      const userList = document.querySelector('#online-users-list');
      userList.innerHTML = ('');

      usersToRender.forEach((user) => {
        const listItem = document.createElement('li');
        listItem.className = ''
        listItem.innerHTML = user.nickname;
        listItem.setAttribute('data-testid', 'online-user');
        userList.appendChild(listItem);
      });
    }

    function sendNickOnConnection() {
      const nickname = document.querySelector('#nickname').innerHTML;
      socket.emit('client-server-add-user', nickname)
    }

    socket.on('connect', (socket) => {
      setNickname();
      sendNickOnConnection();
    });

    socket.on('server-client-users-online', (users) => {
      renderOnlineUsers(users, socket.id);
    });

    socket.on('message', (message) => {
      const chatBody = document.querySelector('#chat-body');
      const listItem = document.createElement('li');
      listItem.innerHTML = message;
      listItem.className = 'list-group-item';
      listItem.setAttribute('data-testid', 'message');
      chatBody.appendChild(listItem);
    });
    
    document.onload = socket.emit('client-server-get-users')
    sendMessage();
    saveNickname();
    
  </script>
</body>
</html>