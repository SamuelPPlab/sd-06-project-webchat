<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Página com Socket.io</title>
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
  <h1>Socket.io</h1>

  <label>Digite seu nickname:
    <input data-testid="nickname-box" type="text" id="nickname">
  </label>
  <button data-testid="nickname-button" id="set-nickname-btn">Enviar</button>

  <br>

  <label>Digite sua mensagem:
  <input type="text "data-testid="message-box" id="message">
  </label>
  <button data-testid="send-button" id="send-message-btn">Enviar</button>
  <br>

  <h3>Usuarios</h3>
  <ul id='users'></ul>

  <h3>Mensagens</h3>
  <ul id='messages'>
    <% messages.forEach((msg) => { %>
      <li data-testid="message"><%= `${msg.timestamp} ${msg.nickname} ${msg.message}` %></li>
    <% }) %>
  </ul>

  <script>
    const socket = io('http://localhost:3000'); //abre conexão no front-end com o socket
    let thisUser = {nickname: '', id: ''};

    socket.on('connect', () => {
    const nickname = socket.id.slice(0,16);
    socket.emit('login', nickname)
    });

    document.querySelector('#send-message-btn').addEventListener('click', () => {
      const nickname = !thisUser.nickname? socket.id.slice(0,16) : thisUser.nickname;
      const mensagem = document.querySelector('#message').value;
      const message = {chatMessage: mensagem, nickname}
      socket.emit('message', message)
    });

    document.querySelector('#set-nickname-btn').addEventListener('click', () => {
      const thisNickname = document.querySelector('#nickname').value;
      if (thisNickname.length !== 0 ) {
      // const nickname = !thisUser.nickname? socket.id.slice(0,16) : thisNickname;
      thisUser.nickname = thisNickname;
      thisUser.id = socket.id;
      socket.emit('updateUsers', thisUser)
      }
      if(thisNickname.length === 0 ) {
      thisUser.nickname = socket.id.slice(0,16);
      thisUser.id = socket.id;
      socket.emit('updateUsers', thisUser)
      }
     
    });

    socket.on('message', (message) => {
      const messageLi = document.createElement('li');
      messageLi.innerText = message;
      messageLi.setAttribute('data-testid', 'message')
      document.querySelector('#messages').appendChild(messageLi)
    })


    const createUserList = (user) => {
      const userLi = document.createElement('li');
      userLi.innerText = user.nickname;
      userLi.setAttribute('data-testid', 'online-user');
      document.querySelector('#users').appendChild(userLi)
    }

    const listAllUsers = (users) => {
      document.querySelector('#users').innerHTML = '';
      // Coloca o usuario na primeira posição da lista
      createUserList(thisUser);
      users.filter(user => user.id !== thisUser.id).forEach(user => createUserList(user));
    }

    socket.on('onlineUsers', (users) => {
      const nickname = !thisUser.nickname? socket.id.slice(0,16) : thisUser.nickname;
      thisUser.nickname = nickname
      thisUser = users.find(user => user.nickname === thisUser.nickname);
      listAllUsers(users);
      // const userUl = document.querySelector('#users');
      // userUl.innerHTML = '';
      // users.forEach((user) => { 
      //   const userLi = document.createElement('li');
      //   userLi.innerText = user.nickname;
      //   userLi.setAttribute('data-testid', 'online-user');
      //   userUl.appendChild(userLi)
      // })
    })

  </script>
</body>
</html>