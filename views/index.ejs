<!DOCTYPE html>
<html>
  <head>
    <title>WebChat project - bloco 32</title>
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="/styles/index.css">
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <section>
      <h4>Usu√°rio: <span id="current-user">
          Anonymous
      </span></h4>
      <form id="user-form" action="">
        <input id="user-login" data-testid="nickname-box" autocomplete="off" />
        <button type="submit" data-testid="nickname-button">Entrar</button>
      </form>
    </section>
    <section>
      <ul id="users-online"></ul>
    </section>
    <section>
      <form id="chat-form" action="">
        <input id="msgInput" data-testid="message-box" autocomplete="off" />
        <button type="submit" data-testid="send-button">Send</button>
      </form>
      <section>
        <ul id="chat-messages">
          <% messages.forEach((message) => { %>
            <li data-testid="message">
              <%= message %>
            </li>
          <% }) %>
        </ul>
      </section>
    <script>
      const socket = io();

      // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
      const generateUser = () => Math.random().toString(21).substring(2, 10)
        + Math.random().toString(21).substring(2, 10);
      let currentUser = sessionStorage.getItem('webchat-user') || generateUser();

      const updateNickname = (newName, prevName = '') => {
        currentUser = newName.slice();
        const userElement = document.querySelector('#current-user');
        userElement.innerText = currentUser;
        sessionStorage.setItem('webchat-user', currentUser);
        socket.emit('userLogin', { user: currentUser, prevUser: prevName });
        return true;
      };

      updateNickname(currentUser);

      document.querySelector('#user-form')
        .addEventListener('submit', (e) => {
          e.preventDefault();
          const prevName = currentUser.slice();
          const newName = document.querySelector('#user-login');
          updateNickname(newName.value, prevName);
          newName.value = '';
          return true;
        });

      document.querySelector('#chat-form')
        .addEventListener('submit', async (e) => {
          e.preventDefault();
          const inputMessage = document.querySelector('#msgInput');
          const messageObject = { nickname: currentUser, chatMessage: inputMessage.value };
          socket.emit('message', messageObject);
          inputMessage.value = '';
          return false;
        });

      const chatUl = document.querySelector('#chat-messages');
      const printMessage = (chatMessage) => {
        const li = document.createElement('li');
        li.dataset.testid = 'message';
        li.innerText = chatMessage;
        chatUl.appendChild(li);
      };
      socket.on('message', (msg) => printMessage(msg));

      socket.on('usersOnline', (users) => {
        const usersUl = document.querySelector('#users-online');
        usersUl.innerHTML = '';

        users.splice(users.indexOf(currentUser), 1);
        const li = document.createElement('li');
        li.dataset.testid = 'online-user';
        li.innerText = currentUser;
        usersUl.appendChild(li);

        users.forEach((user) => {
          const userLi = document.createElement('li');
          userLi.dataset.testid = 'online-user';
          userLi.innerText = user;
          usersUl.appendChild(userLi);
        });
      });

    </script>
  </body>
</html>