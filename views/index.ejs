<html>
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Chat</title>
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <h1>Welcome to WebChat Project!</h1>
    <form class="chat">
      <input
      type="text"
      name="nickname"
      id="nickname-box"
      data-testid="nickname-box"
      placeholder="Type your nickname"
    />
      <div id="messages"></div>
      <input
      type="text"
      id="message-box"
      data-testid="message-box"
      name="message"
      placeholder="Type your msg"
    />
      <button type="button" id="send-button" data-testid="send-button">Send</button>
      <button type="button" id="nickname-save" data-testid="nickname-button">Save nickname</button>
    </form>
    <ul id="allUsers"></ul>
    <ul id="allMessages">
      <% renderMessages.forEach((message) => { %>
        <li data-testid="message"><%= message %></li>
      <% }); %>
    </ul>
  </body>
  <script>
    const socket = io();
    let nickname = '';

    const dataTestId = 'data-testid';

    const createMessage = (response) => {
      const allMessages = document.querySelector('#allMessages');
      const li = document.createElement('li');
      li.setAttribute(dataTestId, 'message');
      li.innerText = response;
      allMessages.appendChild(li);
    }

    const button = document.querySelector('#send-button');
    
    button.addEventListener('click', () => {
      const inputMessage = document.querySelector('#message-box');
      socket.emit('message', { chatMessage: inputMessage.value, nickname });
      inputMessage.value = '';
      return false;
    });
    
    const buttonNickname = document.querySelector('#nickname-save');
    
    buttonNickname.addEventListener('click', () => {
      const newNickname = document.querySelector('#nickname-box');
      socket.emit('changeNickname', { newNickname: newNickname.value });
      nickname = newNickname.value;
      newNickname.value = '';
    });

    socket.on('connected', (nicknameGenerated, msgs) => {
      nickname = nicknameGenerated;
      addUser(nicknameGenerated);
      console.log('as mensagens tao aqui', msgs);  
    });
    
    socket.on('message', (message) => createMessage(message));

    socket.on('updateOnlineUsers', (allUsers) => {
      const notOnline =  allUsers.filter((user) => user.id !== socket.id);
      const firstUser = allUsers.filter((user) => user.id === socket.id);
      const concatUsers = firstUser.concat(notOnline);
      nickname = allUsers.find((user) => user.id === socket.id).nickname
      
      const onlineUsersList = document.querySelector('#allUsers');
      while (onlineUsersList.firstChild) onlineUsersList.removeChild(onlineUsersList.lastChild);
      concatUsers.forEach((user) => {
        const renderUsers = document.createElement('li');
    
        renderUsers.setAttribute(dataTestId, 'online-user');
        renderUsers.innerHTML = user.nickname;
        document.querySelector('#allUsers').appendChild(renderUsers);
      });
    });
  </script>
</html>